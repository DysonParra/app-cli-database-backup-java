/*
 * @fileoverview    {BackUpFrame}
 *
 * @version         2.0
 *
 * @author          Dyson Arley Parra Tilano <dysontilano@gmail.com>
 *
 * @copyright       Dyson Parra
 * @see             github.com/DysonParra
 *
 * History
 * @version 1.0     Implementation done.
 * @version 2.0     Documentation added.
 */
package com.project.dev.frame;

import com.project.dev.database.DataBaseConfig;
import com.project.dev.database.DataBaseConfig;
import com.project.dev.tray.TrayIconSetter;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.text.Highlighter.HighlightPainter;

/**
 * TODO: Description of {@code BackUpFrame}.
 *
 * @author Dyson Parra
 * @since Java 17 (LTS), Gradle 7.3
 */
public class BackUpFrame extends JFrame {

    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
    private static final HighlightPainter redPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.red);
    private final JFrame frame = this;
    private DataBaseConfig dataBaseConfig = new DataBaseConfig();
    private Calendar calendar;

    /**
     * FIXME: Description of method {@code BackUpFrame}. Creates new Frame
     *
     */
    public BackUpFrame() {
        initComponents();

        frame.setTitle("BackUp");
        frame.setIconImage(new ImageIcon(BackUpFrame.class.getResource("/assets/main_icon.png")).getImage());
        TrayIconSetter.setTrayIconToFrame(frame);

        labelMessage3.setHorizontalAlignment(JTextField.CENTER);
        labelMessage4.setHorizontalAlignment(JTextField.CENTER);
        btnEditTime.setHorizontalAlignment(JTextField.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEditTime = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaLog = new javax.swing.JTextArea();
        labelMessage3 = new javax.swing.JLabel();
        labelMessage4 = new javax.swing.JLabel();
        btnConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btnEditTime.setText("Cambiar tiempo");
        btnEditTime.setPreferredSize(new java.awt.Dimension(85, 32));
        btnEditTime.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTimeActionPerformed(evt);
            }
        });

        textAreaLog.setEditable(false);
        textAreaLog.setColumns(20);
        textAreaLog.setRows(5);
        jScrollPane1.setViewportView(textAreaLog);

        labelMessage3.setText("Se genera backup cada 3600 seg, el proximo el:");

        labelMessage4.setText("10 min");

        btnConfig.setText("Cambiar configuración");
        btnConfig.setPreferredSize(new java.awt.Dimension(85, 32));
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMessage4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addComponent(labelMessage3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnEditTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnEditTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelMessage3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelMessage4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTimeActionPerformed
        JPanel p = new JPanel(new GridLayout(3, 1, 0, 5));
        p.add(new JLabel("Escriba el tiempo (en segundos)", JLabel.CENTER));
        p.add(new JLabel("para que se genere un nuevo backup", JLabel.CENTER));
        JTextField editTextTime = new JTextField(15);
        addTextFormat(editTextTime, "\\d*");
        p.add(editTextTime);
        int val = JOptionPane.showConfirmDialog(null, p, "Cambio de tiempo", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
        if (JOptionPane.OK_OPTION == val) {
            if (!editTextTime.getText().equals("")) {
                dataBaseConfig.setWaitTime(Integer.parseInt(editTextTime.getText()));
                editTextTime.setText("");
                //printMessage("Se cambió el tiempo a " + waitTime[0] + " segundos");
                labelMessage3.setText("Se genera backup cada " + dataBaseConfig.getWaitTime() + " seg, el proximo el:");
                synchronized (dataBaseConfig.getSynchronizer()) {
                    dataBaseConfig.getSynchronizer().notifyAll();
                }
            } else
                printMessage("Escriba un valor primero");
        }
    }//GEN-LAST:event_btnEditTimeActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        JPanel p = new JPanel(new GridLayout(6, 1, 0, 5));
        JLabel labelInfo1 = new JLabel("Escriba la configuración", JLabel.RIGHT);
        JLabel labelInfo2 = new JLabel(" de la base de datos", JLabel.LEFT);
        JLabel labelInfo3 = new JLabel("", JLabel.CENTER);
        JLabel labelInfo4 = new JLabel("", JLabel.CENTER);
        JLabel labelUser = new JLabel("Usuario", JLabel.CENTER);
        JTextField editTextUser = new JTextField(5);
        JLabel labelPass = new JLabel("Contraseña", JLabel.CENTER);
        JPasswordField editTextPass = new JPasswordField(5);
        JLabel labelDB = new JLabel("Base de datos", JLabel.CENTER);
        JTextField editTextDB = new JTextField(5);

        p.add(labelInfo1);
        p.add(labelInfo2);
        p.add(labelInfo3);
        p.add(labelInfo4);
        p.add(labelUser);
        p.add(editTextUser);
        p.add(labelPass);
        p.add(editTextPass);
        p.add(labelDB);
        p.add(editTextDB);

        editTextUser.setText(dataBaseConfig.getUsername());
        editTextPass.setText(dataBaseConfig.getPassword());
        editTextDB.setText(dataBaseConfig.getDatabase());

        int val = JOptionPane.showConfirmDialog(null, p, "Configuración", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
        if (JOptionPane.OK_OPTION == val) {
            if (!editTextUser.getText().equals("") && !editTextDB.getText().equals("")) {
                //System.out.println(dataBaseConfig);
                dataBaseConfig.setUsername(editTextUser.getText());
                dataBaseConfig.setPassword(String.valueOf(editTextPass.getPassword()));
                dataBaseConfig.setDatabase(editTextDB.getText());
                //System.out.println(dataBaseConfig);
            } else
                printMessage("Escriba la información primero");
        }
    }//GEN-LAST:event_btnConfigActionPerformed

    /**
     * TODO: Description of method {@code main}.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BackUpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BackUpFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnEditTime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelMessage3;
    private javax.swing.JLabel labelMessage4;
    private javax.swing.JTextArea textAreaLog;
    // End of variables declaration//GEN-END:variables

    /**
     * TODO: Description of method {@code getDataBaseConfig}.
     *
     * @return
     */
    public DataBaseConfig getDataBaseConfig() {
        return dataBaseConfig;
    }

    /**
     * TODO: Description of method {@code setDataBaseConfig}.
     *
     * @param dataBaseConfig
     */
    public void setDataBaseConfig(DataBaseConfig dataBaseConfig) {
        this.dataBaseConfig = dataBaseConfig;
    }

    /**
     * TODO: Description of method {@code addText}.
     *
     * @param text
     */
    public void addText(String text) {
        int oldLenght = textAreaLog.getText().length();
        int newLenght = oldLenght + text.length() + 1;
        //textAreaLog.append(text + "\n");
        textAreaLog.setText(textAreaLog.getText() + text + "\n");

        try {
            if (text.contains("Error")) {
                textAreaLog.getHighlighter().addHighlight(oldLenght, newLenght, redPainter);
            } else {
                //textAreaLog.getHighlighter().addHighlight(oldLenght, newLenght, DefaultHighlighter.DefaultPainter);
            }
        } catch (BadLocationException e) {
        }
        calendar = Calendar.getInstance();
        calendar.add(Calendar.SECOND, dataBaseConfig.getWaitTime());
        labelMessage4.setText(DATE_FORMAT.format(calendar.getTime()));
    }

    /**
     * TODO: Description of method {@code printMessage}.
     *
     * @param message
     */
    public void printMessage(String message) {
        new Thread(() -> {
            JOptionPane.showMessageDialog(this, message);
        }).start();
    }

    private void addTextFormat(JTextComponent component, String regex) {
        ((AbstractDocument) component.getDocument()).setDocumentFilter(new DocumentFilter() {
            Pattern regEx = Pattern.compile(regex);

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                Matcher matcher = regEx.matcher(text);
                if (!matcher.matches())
                    return;
                super.replace(fb, offset, length, text, attrs);
            }
        });
    }

}
